{"version":3,"sources":["logo.svg","component/Logo.js","component/RecipeCards.js","component/Recipes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","logo","className","Component","card","onClick","props","newPopup","recipeInfo","class","src","this","image","name","price","description","recipe","textValue","event","setState","target","value","state","recipeData","request","XMLHttpRequest","open","send","onload","JSON","parse","response","data","indeces","Object","keys","filter","index","toLowerCase","includes","onChange","placeholder","map","item","RecipeCards","popupPage","App","closePop","pop","popup","console","log","style","float","margin","fontSize","cursor","label","Logo","Recipes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,8HCU5BC,G,mLANP,OAAO,6BACC,uBAAGC,UAAU,QAAb,gB,GAHGC,cCcJC,E,uKAZD,IAAD,OACL,OAAO,yBAAKF,UAAU,OAAOG,QAAS,kBAAM,EAAKC,MAAMC,SAAS,EAAKD,MAAME,cACvE,yBAAKC,MAAM,QAAQC,IAAKC,KAAKL,MAAME,WAAWI,QAC9C,yBAAKV,UAAU,QACX,yBAAKA,UAAU,SAAQ,8BAAOS,KAAKL,MAAME,WAAWK,OACpD,yBAAKX,UAAU,QAAO,8BAAOS,KAAKL,MAAME,WAAWM,SAEvD,yBAAKZ,UAAU,YAAW,8BAAOS,KAAKL,MAAME,WAAWO,mB,GAThDZ,aCoDJa,E,kDAjDX,aAAe,IAAD,8BACV,gBAsBJC,UAAY,SAACC,GACT,EAAKC,SAAS,CACVF,UAAWC,EAAME,OAAOC,SAvB5B,EAAKC,MAAQ,CACTC,WAAY,GACZN,UAAW,IAJL,E,gEAQO,IAAD,OACZO,EAAU,IAAIC,eAElBD,EAAQE,KAAK,MAAO,0CAEpBF,EAAQG,OAERH,EAAQI,OAAS,WACb,EAAKT,SAAS,CACVI,WAAYM,KAAKC,MAAMN,EAAQO,e,+BAYjC,IAAD,OACDC,EAAOrB,KAAKW,MAAMC,WAClBU,EAAUC,OAAOC,KAAKxB,KAAKW,MAAMC,YAAYa,QAAO,SAAAC,GAEpD,GADU,EAAKf,MAAMC,WAAWc,GAAOxB,KAC9ByB,cAAcC,SAAS,EAAKjB,MAAML,UAAUqB,eAAgB,OAAO,EAAKhB,MAAMC,WAAWc,MAGtG,OAAO,6BACC,2BAAOnC,UAAU,SAASsC,SAAU7B,KAAKM,UAAWwB,YAAY,kBAChE,yBAAKvC,UAAU,iBAEP+B,EAAQS,KAAI,SAAAC,GACR,OAAO,kBAACC,EAAD,CAAarC,SAAU,EAAKD,MAAMuC,UAAWrC,WAAYwB,EAAKW,c,GA3C5ExC,aCwDN2C,E,kDApDb,aAAe,IAAD,8BACZ,gBAOFC,SAAW,WACT,EAAK5B,SAAS,CAAC6B,IAAK,MATR,EAYdC,MAAQ,SAACjB,GACPkB,QAAQC,IAAInB,GACZ,EAAKb,SAAS,CACZ6B,IAAK,yBAAK9C,UAAU,cACpB,uBAAGkD,MAAO,CAACC,MAAO,QAASC,OAAQ,OAAQC,SAAU,OAAQC,OAAQ,WAAYnD,QAAS,EAAK0C,UAA/F,KACA,yBAAK7C,UAAU,WACb,yBAAKA,UAAU,QACd,sCACA,yBAAKA,UAAU,WAAWQ,IAAKsB,EAAKpB,QACpC,uCACA,yBAAKV,UAAU,UAAf,8eAID,yBAAKA,UAAU,SACb,qCACA,6BAAM8B,EAAKnB,MACX,qCACA,6BAAMmB,EAAKyB,OACX,2CACA,yCA7BN,EAAKnC,MAAQ,CACX0B,IAAK,IAJK,E,qDA0CZ,OACE,yBAAK9C,UAAU,OACZS,KAAKW,MAAM0B,IACZ,kBAACU,EAAD,MACA,kBAACC,EAAD,CAASd,UAAWlC,KAAKsC,a,GA/Cf9C,aCMEyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.41dd3893.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nclass logo extends Component {\r\n    render() {\r\n        return <div>\r\n                <p className=\"logo\">Recipes</p>\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default logo;","import React, {Component} from 'react';\r\n\r\nclass card extends Component {\r\n\r\n    render() {\r\n        return <div className=\"card\" onClick={() => this.props.newPopup(this.props.recipeInfo)}>\r\n            <img class=\"image\" src={this.props.recipeInfo.image}/>\r\n            <div className=\"info\">\r\n                <div className=\"title\"><span>{this.props.recipeInfo.name}</span></div>\r\n                <div className=\"rate\"><span>{this.props.recipeInfo.price}</span></div>\r\n            </div>\r\n            <div className=\"descript\"><span>{this.props.recipeInfo.description}</span></div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default card;","import React, {Component} from 'react';\r\nimport RecipeCards from './RecipeCards';\r\n\r\nclass recipe extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            recipeData: \"\",\r\n            textValue: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() { \r\n        var request = new XMLHttpRequest();\r\n\r\n        request.open(\"GET\", \"http://starlord.hackerearth.com/recipe\");\r\n\r\n        request.send();\r\n\r\n        request.onload = () => {\r\n            this.setState({\r\n                recipeData: JSON.parse(request.response)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    textValue = (event) => {\r\n        this.setState({\r\n            textValue: event.target.value\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        var data = this.state.recipeData;\r\n        var indeces = Object.keys(this.state.recipeData).filter(index => {\r\n            var names=this.state.recipeData[index].name;\r\n            if(names.toLowerCase().includes(this.state.textValue.toLowerCase())) return this.state.recipeData[index]\r\n        })\r\n\r\n        return <div>\r\n                <input className=\"search\" onChange={this.textValue} placeholder=\"Search recipe\"/>\r\n                <div className=\"recipeDetails\">\r\n                    {\r\n                        indeces.map(item => {\r\n                            return <RecipeCards newPopup={this.props.popupPage} recipeInfo={data[item]}/>\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default recipe;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Logo from './component/Logo';\nimport Recipes from './component/Recipes';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      pop: \"\"\n    }\n  }\n\n  closePop = () => {\n    this.setState({pop: \"\"})\n  }\n\n  popup = (data) => {\n    console.log(data);\n    this.setState({\n      pop: <div className=\"popup-page\">\n      <p style={{float: \"right\", margin: \"10px\", fontSize: \"30px\", cursor: \"pointer\"}} onClick={this.closePop}>X</p>\n      <div className=\"content\">\n        <div className=\"left\">\n         <p>Recipe:</p>\n         <img className=\"newImage\" src={data.image} />\n         <p>Details:</p>\n         <div className=\"newDet\">\n         Pizza (Italian: [ˈpittsa], Neapolitan: [ˈpittsə]) is a savory dish of Italian origin consisting of a usually round, flattened base of leavened wheat-based dough topped with tomatoes, cheese, and often various other ingredients (such as anchovies, mushrooms, onions, olives, pineapple, meat, etc.) which is then baked at a high temperature, traditionally in a wood-fired oven.[1] A small pizza is sometimes called a pizzetta. A person who makes pizza is known as a pizzaiolo.\n         </div>\n        </div>\n        <div className=\"right\">\n          <p>Title:</p>\n          <div>{data.name}</div>\n          <p>Label:</p>\n          <div>{data.label}</div>\n          <p>Add Comments</p>\n          <textarea>\n          \n          </textarea>\n        </div>\n      </div>\n    </div>\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.pop}\n        <Logo/>\n        <Recipes popupPage={this.popup}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}